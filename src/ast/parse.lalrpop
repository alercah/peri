// Use a glob import to avoid unused import lints, due to lalrpop bug.
use crate::token::*;
use num_bigint::BigInt;
use num_rational::BigRational;
use std::ops::Neg;
use std::borrow::Cow;
use super::*;

grammar<'input>(text: &'input str);

List<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

Opt<T>: T = {
    T? => <>.unwrap_or_default(),
}

Ident: Ident = {
    "Ident" => Ident(<>.into_owned()),
}

String: String = {
    "String" => <>.into_owned(),
}

Num: BigRational = {
    "Num" => {
        let f = <>.2.unwrap_or("0".into());
        let mut n: BigRational = (<>.1.into_owned() + &f).parse().unwrap();
        n = n / BigRational::from(BigInt::from(f.len()));
        if !<>.0 { n = n.neg(); }
        n
    },
}

pub File: File = {
    <stmts:Stmt*> => { File{<>} },
}

StmtBlock: Vec<Stmt> = {
    "{" <Stmt*> "}",
}

Stmt: Stmt = {
    Decl => Stmt::Decl(<>),
    Prop => Stmt::Prop(<>),
    "if" <Expr> <StmtBlock> <Opt<("else" <StmtBlock>)>> => Stmt::Cond(<>),
}

Item: Item = {
    <name:DeclName> <stmts:Opt<StmtBlock>> => Item{<>},
}

Location: Location = {
    <name:DeclName> <stmts:Opt<StmtBlock>> => Location{<>},
}

DeclName: DeclName = {
    <ident:Ident> <human:String?> => DeclName{<>},
}

Name: Name = {
    "." <Ident> => Name::Sub(Box::new(Name::Global), <>),
    Ident => Name::Id(<>),
    <r:Name> "." <i:Ident> => Name::Sub(Box::new(r), i),
}

LinkDir: LinkDir = {
    "to" => LinkDir::To,
    "from" => LinkDir::From,
    "with" => LinkDir::With,
}

Param: Param = {
    <name:Ident> <ty:(":" <Ty>)?> => Param{<>},
}

Decl: Decl = {
    "region" <name:DeclName> <stmts:StmtBlock> => Decl::Region(Region{<>}),
    "link" <name:DeclName?> <dir:LinkDir> <regions:List<Name>> <stmts:StmtBlock> =>
        Decl::Link(Link{<>}),
    "item" <Item> => Decl::Item(<>),
    "items" <tags:List<Ident>> "{" <decls:Item*> "}" => Decl::Items(Items{<>}),
    "location" <Location> => Decl::Location(<>),
    "locations" "{" <decls:Location*> "}" => Decl::Locations(Locations{<>}),
    "fn" <name:DeclName> <params:Opt<("(" <List<Param>> ")")>> <ret_ty:("->" <Ty>)?> "=" <body:Expr> =>
        Decl::Fn(FnDecl{<>}),
    "enum" <name:DeclName> "{" <variants:DeclName*> "}" => Decl::Enum(Enum{<>}),
    "config" <name:DeclName> ":" <ty:Ty> <default:("=" <Expr>)?> =>
        Decl::Config(Config{<>}),
    "config" "enum" <name:DeclName> "{" <variants:DeclName*> "}" <default:("=" <Expr>)?> =>
        Decl::ConfigEnum(ConfigEnum{<>}),
    "random" <name:DeclName> "=" "[" <vals:List<Expr>> "]" =>
        Decl::Random(Random{<>}),
}

Prop: Prop = {}

PrimExpr: Box<Expr> = {
    Num => Box::new(Expr::Num(<>)),
    "true"=> Box::new(Expr::Bool(true)),
    "false" => Box::new(Expr::Bool(false)),
    Name => Box::new(Expr::Name(<>)),
    "(" <CondExpr> ")",
}

CallExpr: Box<Expr> = {
    <func:CallExpr> "(" <params:List<Expr>> ")" => Box::new(Expr::Call(<>)),
    PrimExpr,
}

NegExpr: Box<Expr> = {
    "not" <CallExpr> => Box::new(Expr::Not(<>)),
    CallExpr,
}

MulOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
    "%" => BinOp::Mod,
}

MulExpr: Box<Expr> = {
    MulExpr MulOp NegExpr => Box::new(Expr::Bin(<>)),
    NegExpr,
}

AddOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
}

AddExpr: Box<Expr> = {
    AddExpr AddOp MulExpr => Box::new(Expr::Bin(<>)),
    MulExpr,
}

CompOp: BinOp = {
    "==" => BinOp::Eq,
    "!=" => BinOp::NEq,
    "<" => BinOp::LT,
    "<=" => BinOp::LE,
    ">" => BinOp::GT,
    ">=" => BinOp::GE,
}

CompExpr: Box<Expr> = {
    AddExpr CompOp AddExpr => Box::new(Expr::Bin(<>)),
    AddExpr,
}

LogExpr: Box<Expr> = {
    <init:(<CompExpr> "and")+> <last:CompExpr> => {
        let mut v = init;
        v.push(last);
        Box::new(Expr::And(v.into_iter().map(|b| *b).collect()))
    },
    <init:(<CompExpr> "or")+> <last:CompExpr> => {
        let mut v = init;
        v.push(last);
        Box::new(Expr::Or(v.into_iter().map(|b| *b).collect()))
    },
    CompExpr,
}

MatchArm: MatchArm = {
    <pat:Name> "=>" <expr:Expr> => MatchArm{<>},
}

CondExpr: Box<Expr> = {
    "if" <CondExpr> "then" <CondExpr> "else" <CondExpr> => Box::new(Expr::If(<>)),
    "match" <CondExpr> "{" <List<MatchArm>> "}" => Box::new(Expr::Match(<>)),
    LogExpr,
}

Expr: Expr = {
    CondExpr => *<>,
}

Ty: Ty = {
    "num" => Ty::Num,
    "bool" => Ty::Bool,
    "item" => Ty::Item,
    "fn" "(" <params:List<Ty>> ")" <ret_ty:("->" <Ty>)> => Ty::Fn(params, Box::new(ret_ty)),
    "[" <Ty> "]" => Ty::List(Box::new(<>)),
    Name => Ty::Name(<>),
}

extern {
    type Error = failure::Error;

    enum Tok<'input> {
        "region" => Tok::Kw(Kw::Region),
        "link" => Tok::Kw(Kw::Link),
        "item" => Tok::Kw(Kw::Item),
        "items" => Tok::Kw(Kw::Items),
        "location" => Tok::Kw(Kw::Location),
        "locations" => Tok::Kw(Kw::Locations),
        "fn" => Tok::Kw(Kw::Fn),
        "enum" => Tok::Kw(Kw::Enum),
        "config" => Tok::Kw(Kw::Config),
        "configset" => Tok::Kw(Kw::Configset),
        "random" => Tok::Kw(Kw::Random),
        "if" => Tok::Kw(Kw::If),
        "else" => Tok::Kw(Kw::Else),
        "modify" => Tok::Kw(Kw::Modify),
        "override" => Tok::Kw(Kw::Override),
        "requires" => Tok::Kw(Kw::Requires),
        "visible" => Tok::Kw(Kw::Visible),
        "unlock" => Tok::Kw(Kw::Unlock),
        "tag" => Tok::Kw(Kw::Tag),
        "alias" => Tok::Kw(Kw::Alias),
        "provides" => Tok::Kw(Kw::Provides),
        "progressive" => Tok::Kw(Kw::Progressive),
        "val" => Tok::Kw(Kw::Val),
        "max" => Tok::Kw(Kw::Max),
        "consumable" => Tok::Kw(Kw::Consumable),
        "restrict" => Tok::Kw(Kw::Restrict),
        "avail" => Tok::Kw(Kw::Avail),
        "infinity" => Tok::Kw(Kw::Infinity),
        "grants" => Tok::Kw(Kw::Grants),
        "count" => Tok::Kw(Kw::Count),
        "start" => Tok::Kw(Kw::Start),
        "num" => Tok::Kw(Kw::Num),
        "bool" => Tok::Kw(Kw::Bool),
        "then" => Tok::Kw(Kw::Then),
        "match" => Tok::Kw(Kw::Match),
        "true" => Tok::Kw(Kw::True),
        "false" => Tok::Kw(Kw::False),
        "not" => Tok::Kw(Kw::Not),
        "and" => Tok::Kw(Kw::And),
        "or" => Tok::Kw(Kw::Or),
        "min" => Tok::Kw(Kw::Min),
        "with" => Tok::Kw(Kw::With),
        "to" => Tok::Kw(Kw::To),
        "from" => Tok::Kw(Kw::From),
        "in" => Tok::Kw(Kw::In),
        "(" => Tok::Sym(Sym::LParen),
        ")" => Tok::Sym(Sym::RParen),
        "[" => Tok::Sym(Sym::LBrack),
        "]" => Tok::Sym(Sym::RBrack),
        "{" => Tok::Sym(Sym::LBrace),
        "}" => Tok::Sym(Sym::RBrace),
        ";" => Tok::Sym(Sym::Semi),
        "," => Tok::Sym(Sym::Comma),
        ":" => Tok::Sym(Sym::Colon),
        "." => Tok::Sym(Sym::Dot),
        "=" => Tok::Sym(Sym::Assign),
        "->" => Tok::Sym(Sym::Arrow),
        "=>" => Tok::Sym(Sym::DoubleArrow),
        "+" => Tok::Sym(Sym::Plus),
        "-" => Tok::Sym(Sym::Minus),
        "*" => Tok::Sym(Sym::Star),
        "/" => Tok::Sym(Sym::Slash),
        "%" => Tok::Sym(Sym::Percent),
        "==" => Tok::Sym(Sym::Eq),
        "!=" => Tok::Sym(Sym::NEq),
        "<" => Tok::Sym(Sym::LT),
        "<=" => Tok::Sym(Sym::LE),
        ">=" => Tok::Sym(Sym::GT),
        ">" => Tok::Sym(Sym::GE),
        "String" => Tok::String(<Cow<'input, str>>),
        "Ident" => Tok::Ident(<Cow<'input, str>>),
        "Num" => Tok::Num(<bool>, <Cow<'input, str>>, <Option<Cow<'input, str>>>),
    }
}
